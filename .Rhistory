x_axis <- scale_x_continuous(breaks=x_breaks, labels=x_labels)
inf_chain <- all_chains$inf_chain
## Look at inferred attack rates
## Green shows times that serum samples were taken
p_ar <- plot_attack_rates(inf_chain, titre_data, strains_isolation_times, pad_chain=TRUE,
plot_den = TRUE,prior_pars=list(prior_version=prior_version,
alpha=par_tab[par_tab$names=="alpha","values"],
beta=par_tab[par_tab$names=="beta","values"])) + x_axis
print(p_ar)
## Calculate convergence diagnostics and summary statistics on infection histories
## Important to scale all infection estimates by number alive from titre_dat
n_alive <- get_n_alive_group(titre_data, strains_isolation_times,melt=TRUE)
## This function generates a number of MCMC outputs
ps_infhist <- plot_posteriors_infhist(inf_chain=inf_chain,
years=strains_isolation_times,
samples = 100,
## Needs to be smaller than length of sampled chain
n_alive=n_alive)
## Posterior mean, median, 95% credible intervals and effective sample size
## on per time attack rates
print(head(ps_infhist[["estimates"]]$by_year))
## Posterior mean, median, 95% credible intervals and effective sample size
## on per individual total number of infections
print(head(ps_infhist[["estimates"]]$by_indiv))
## Check for agreement between inferred cumulative infection histories
## for some individuals
p_indiv_inf_hists <- generate_cumulative_inf_plots(inf_chain, indivs=1:9, pad_chain=FALSE,
nsamp = 100,
## Needs to be smaller than length of sampled chain
strain_isolation_times = strains_isolation_times,
number_col=3)
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github("stan-dev/cmdstanr")
devtools::install_github("rmcelreath/rethinking")
library(rethinking)
seq(0, 1, 1000)
seq(0.0, 1.0, 1000)
?seq
seq(0.0, 1.0, by=0.01)
seq(0.0, 1.0, 0.01)
grid <- seq(0.0, 1.0, length.out=10000)
grid
?dbin
?bin
?dbinom
dbinpn(x = 3, size = 3, prob = grid)
dbinom(x = 3, size = 3, prob = grid)
likelihood <- dbinom(x = 3, size = 3, prob = grid)
posterior <- likelihood * prior
grid <- seq(0.0, 1.0, length.out=10000)
prior <- rep(1, 100)
# W, W, W
likelihood <- dbinom(x = 3, size = 3, prob = grid)
posterior <- likelihood * prior
posterior
likelihood <- dbinom(x = 3, size = 3, prob = grid)
posterior <- likelihood * prior
posterior <- posterior/sum(posterior)
posterior
plot(grid, posterior)
length(likelihood)
length(prior)
length(posterior)
grid <- seq(0.0, 1.0, length.out=1000)
prior <- rep(1, 100)
# W, W, W
likelihood <- dbinom(x = 3, size = 3, prob = grid)
posterior <- likelihood * prior
posterior <- posterior/sum(posterior)
plot(grid, posterior)
prior
likelihood
likelihood <- dbinom(x = 3, size = 4, prob = grid)
posterior <- likelihood * prior
posterior <- posterior/sum(posterior)
plot(grid, posterior)
likelihood <- dbinom(x = 5, size = 7, prob = grid)
posterior <- likelihood * prior
posterior <- posterior/sum(posterior)
plot(grid, posterior)
# compute approximate grid  posterior distribution
grid <- seq(0.0, 1.0, length.out=1000)
prior <- c(rep(0, 50), rep(1, 50))
# W, W, W
likelihood <- dbinom(x = 3, size = 3, prob = grid)
posterior <- likelihood * prior
posterior <- posterior/sum(posterior)
plot(grid, posterior)
# W, W, W, L
likelihood <- dbinom(x = 3, size = 4, prob = grid)
posterior <- likelihood * prior
posterior <- posterior/sum(posterior)
plot(grid, posterior)
# L, W, W, L, W, W, W
likelihood <- dbinom(x = 5, size = 7, prob = grid)
posterior <- likelihood * prior
posterior <- posterior/sum(posterior)
plot(grid, posterior)
plot(grid, posterior)
likelihood
posterior
length9(posterior)
length(posterior)
likelihood * prior
length(prior)
likelihood <- dbinom(x = 3, size = 3, prob = grid)
posterior <- likelihood * prior
posterior <- posterior/sum(posterior)
plot(grid, posterior)
posterior
# compute approximate grid  posterior distribution
grid <- seq(0.0, 1.0, length.out=1000)
prior <- c(rep(0, 500), rep(1, 500))
# W, W, W
likelihood <- dbinom(x = 3, size = 3, prob = grid)
posterior <- likelihood * prior
posterior <- posterior/sum(posterior)
plot(grid, posterior)
# W, W, W, L
likelihood <- dbinom(x = 3, size = 4, prob = grid)
posterior <- likelihood * prior
posterior <- posterior/sum(posterior)
plot(grid, posterior)
# L, W, W, L, W, W, W
likelihood <- dbinom(x = 5, size = 7, prob = grid)
posterior <- likelihood * prior
posterior <- posterior/sum(posterior)
plot(grid, posterior)
plot(grid, posterior)
0.3*0.5/(0.5+0.5*0.3)
0.05/(0.5*0.3)
prev <- init_model_prev("prev", "sero_pos", datafit_prev, "sero_prev")
devtools::load_all()
setwd("~/documents/research/covid/hero/serobayes")
devtools::load_all()
prev <- init_model_prev("prev", "sero_pos", datafit_prev, "sero_prev")
prev
Obj <- prev
substitute(save(x, file = y), list(x = Obj$fit_name,
y = rlang::expr(here::here("data", !!outsting))))
outsting <- paste0("fit_mcmc_", Obj$name, ".RData")
substitute(save(x, file = y), list(x = Obj$fit_name,
y = rlang::expr(here::here("data", !!outsting))))
substitute(save(x, file = y), list(x =  rlang::parse_expr(Obj$fit_name),
y = rlang::expr(here::here("data", !!outsting))))
saveexp <- substitute(save(x, file = y), list(x =  rlang::parse_expr(Obj$fit_name),
y = rlang::expr(here::here("data", !!outsting))))
saveexp
devtools::load_all()
substitute(save(x, file = y),
list(x =  Obj$fit_name,
y =  rlang::expr(here::here("data", !!outsting))))
datafit_OD_curve
datafit_hero
get_datafit_OD_curve()
datafit_OD_curve
get_data_val_OD
devtools::load_all()
datafit_OD_curve
datafit_OD_curve
datafit_control_pro
devtools::load_all()
save_all_datafit()
devtools::load_all()
datafit_control
datafit_control
vector(list(), 2)
>vector
?vector
vector(mode = "list", length = 4)
vector(mode = "numeric", length = 4)
datafit_seropos
?bind_rows
expr(paste0("IgG_", pro, "_OD")]] > OD_val)
expr([[paste0("IgG_", pro, "_OD")]] > OD_val)
enexpr([[paste0("IgG_", pro, "_OD")]] > OD_val)
enexpr(paste0("IgG_", pro, "_OD") > OD_val)
enexpr(paste0("IgG_", pro, "_OD") > OD_val)
rlang::enexpr(paste0("IgG_", pro, "_OD") > OD_val)
rlang::expr(paste0("IgG_", pro, "_OD") > OD_val)
rlang::expr([[paste0("IgG_", pro, "_OD")]] > OD_val)
rlang::expr((Obj$datafit[[paste0("IgG_", pro, "_OD")]] > OD_val) %>% as.numeric)
rlang::expr((Obj$datafit[[!!paste0("IgG_", pro, "_OD")]] > OD_val) %>% as.numeric)
rlang::expr((!!Obj$datafit[[paste0("IgG_", pro, "_OD")]] > OD_val) %>% as.numeric)
rlang::expr((Obj$datafit[[paste0("IgG_", pro, "_OD")]] > OD_val) %>% as.numeric)
rlang::expr((Obj$datafit[[paste0("IgG_", pro, "_OD")]] j OD_val) %>% as.numeric, env = list(pro = "N", j = <))
rlang::expr((Obj$datafit[[paste0("IgG_", pro, "_OD")]] j OD_val) %>% as.numeric, env = list(pro = "N", j = "<"))
rlang::expr((Obj$datafit[[paste0("IgG_", pro, "_OD")]] j OD_val) %>% as.numeric, env = list(pro = "N", j = "<"))
rlang::expr((Obj$datafit[[paste0("IgG_", pro, "_OD")]] j OD_val) %>% as.numeric, env = list(pro = "N", j = "<"))
?expr
eval(rlang::expr((Obj$datafit[[paste0("IgG_", pro, "_OD")]] j OD_val) %>% as.numeric), env = list(pro = "N", j = "<"))
eval(rlang::expr((Obj$datafit[[paste0("IgG_", pro, "_OD")]] j OD_val) %>% as.numeric), env = list(pro = "N", j = "<")
eval(rlang::expr((Obj$datafit[[paste0("IgG_", pro, "_OD")]] j OD_val) %>% as.numeric), env = list(pro = "N", j = "<"))
eval(rlang::expr(`>`(Obj$datafit[[paste0("IgG_", pro, "_OD")]], OD_val)) %>% as.numeric), env = list(pro = "N", j = "<"))
`>`(datafit_seropos[[paste0("IgG_", "N", "_OD")]], OD_val)
`>`(datafit_seropos[[paste0("IgG_", "N", "_OD")]], 0.5)
`>`(datafit_seropos[[paste0("IgG_", "N", "_OD")]], 0.3)
`>`(datafit_seropos[[paste0("IgG_", "N", "_OD")]], 07)
`>`(datafit_seropos[[paste0("IgG_", "N", "_OD")]], 7)
`>`(datafit_seropos[[paste0("IgG_", "N", "_OD")]], 7) %>% as.numeric()
`>`(datafit_seropos[[paste0("IgG_", "N", "_OD")]], 3) %>% as.numeric()
`<`(datafit_seropos[[paste0("IgG_", "N", "_OD")]], 3) %>% as.numeric()
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
spec <- test_metric("Specificity", 60:100, datafit_seroneg, `<`)
devtoolls::load_all()
devtools::load_all()
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
spec <- test_metric("Specificity", 60:100, datafit_seroneg, `<`)
sens$func
datafit_control %>% filter(protein == "N", Type == sens$name)
sens$datafit$age_group
sens$datafit(sens$datafit[[paste0("IgG_", pro, "_OD")]], OD_val)
sens$func(sens$datafit[[paste0("IgG_", pro, "_OD")]], OD_val)
sens$func(sens$datafit[[paste0("IgG_", "N", "_OD")]], OD_val)
sens$func(sens$datafit[[paste0("IgG_", "N", "_OD")]], 0.4)
sens$func(sens$datafit[[paste0("IgG_", "N", "_OD")]], 0.2)
sens$func(sens$datafit[[paste0("IgG_", "N", "_OD")]], 1)
sens$func(sens$datafit[[paste0("IgG_", "N", "_OD")]], 1) %>% as.numeric()
sens$datafit$age_group
?fct_label
?fct_label()
?forcats::fct_label
?forcat::fct_label
?forcat::fct_relabel
?forcats::fct_relabel
sens$age_group
sens$age_groups
sens$datafit$age_groups
sens$datafit$age_group
devtools::load_all()
devtools::load_all()
devtools::load_all()
get_dataplt_metric(sens)
sens
devtools::load_all()
get_dataplt_metric(sens)
devtools::load_all()
get_dataplt_metric(sens)
devtools::load_all()
get_dataplt_metric(sens)
?
fct_recode
sens$datafit$age_group
devtools::load_all()
get_dataplt_metric(sens)
sens$datafit$age_group
devtools::load_all()
sens$datafit$age_group
get_dataplt_metric(sens)
devtools::load_all()
get_dataplt_metric(sens)
devtools::load_all()
get_dataplt_metric(sens)
get_dataplt_metric(spec)
devtools::load_all()
get_dataplt_metric(spec)
get_dataplt_metric(sens)
get_dataplt_metric(spec)
?setMetho
?setMethod
?UseMethod
substr("hellllo", 4)
substr("hellllo", 1, 4)
expr(substr("hellllo", 1, 4))
expr(!!substr("hellllo", 1, 4))
expr(!!substr("hellll0", 1, 4))
expr_parse(!!substr("hellll0", 1, 4))
parse_expr(!!substr("hellll0", 1, 4))
expr_parse(!!substr("hellll0", 1, 4))
?parse
?expr_parse
rlang::parse_expr()
rlang::parse_expr("helo")
rlang::parse_expr("heloo")
devtools::load_all()
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
devtools::load_all()
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
devtools::load_all()
devtools::load_all()
devtools::load_all()
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
sens
?rename
devtools::load_all()
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
devtools::load_all()
devtools::load_all()
devtools::load_all()
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
sens
devtools::document()
devtools::devtools()
devtools::load_all()()
devtools::load_all()
fit(sens)
devtools::load_all()
fit(sens)
devtools::load_all()
fit(sens)
devtools::load_all()
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
spec <- test_metric("Specificity", 60:100, datafit_seroneg, `<`)
fit(sens)
sens$datafit
spec$datafit
devtools::load_all()
fit(sens)
lol <- fit(sens)
lol
`$`
devtools::load_all()
fit(sens)
lol <- fit(sens)
lol
devtools::load_all()
lol <- fit(sens)
devtools::load_all()
lol <- fit(sens)
devtools::load_all()
lol <- fit(sens)
?save
tolower("HELLLO")
`<-`
devtools::load_all()
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
spec <- test_metric("Specificity", 60:100, datafit_seroneg, `<`)
sens
fit(sens)
devtools::document()
devtools::load_all()
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
spec <- test_metric("Specificity", 60:100, datafit_seroneg, `<`)
fit(sens)
sens$datafit
sens
devtools::document()
devtools::document()
devtools::load_all()
fit(sens)
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
spec <- test_metric("Specificity", 60:100, datafit_seroneg, `<`)
fit(sens)
devtools::load_all()
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
spec <- test_metric("Specificity", 60:100, datafit_seroneg, `<`)
fit(sens)
devtools::load_all()
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
spec <- test_metric("Specificity", 60:100, datafit_seroneg, `<`)
fit(sens)
?filter
devtools::load_all()
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
spec <- test_metric("Specificity", 60:100, datafit_seroneg, `<`)
fit(sens)
devtools::load_all()
sens <- test_metric("Sensitivity", 60:100, datafit_seropos, `>`)
spec <- test_metric("Specificity", 60:100, datafit_seroneg, `<`)
fit(sens)
devtools::load_all()
plot(sens)
paste0("fit_mcmc_", Obj$short))
paste0("fit_mcmc_", sens$short))
paste0("fit_mcmc_", sens$short)
?add_fitted_draws
devtools::load_all()
plot(sens)
devtools::load_all()
plot(sens)
devtools::load_all()
plot(sens)
Obj$fit_name
devtools::load_all()
rlang::parse_expr(paste0(Obj$fit_name, "[[1]]")
)
rlang::parse_expr(paste0(Obj$fit_name, "[[1]]"))
rlang::parse_expr(paste0(prev$fit_name, "[[1]]"))
rlang::parse_expr(paste0(sens$fit_name, "[[1]]"))
devtools::load_all()
devtools::load_all()
plot(sens)
last_error()
devtools::load_all()
rlang::last_error()
rlang::last_trace()
devtools::load_all()
plot(sens)
devtools::load_all()
plot(sens)
devtools::load_all()
plot(sens)
rlang::parse_expr(paste0(Obj$fit_name, "[[1]]"))
devtools::load_all()
plot(sens)
exec("add_fitted_draws", newdata = df_pred, model = arg1, n = 100)
arg1 <- rlang::parse_expr(paste0(sens$fit_name, "[[1]]"))
exec("add_fitted_draws", newdata = df_pred, model = arg1, n = 100)
exec("add_fitted_draws", newdata = df_pred, model = !\arg1, n = 100)
exec("add_fitted_draws", newdata = df_pred, model = !!arg1, n = 100)
arg1 <- rlang::parse_expr(paste0("list(model = " ,Obj$fit_name, "[[1]])"))
arg1 <- rlang::parse_expr(paste0("list(model = " ,sens$fit_name, "[[1]])"))
arg1
exec("add_fitted_draws", newdata = df_pred, n = 100, !!arg1)
exec("add_fitted_draws", newdata = df_pred, n = 100, !!arg1)exec("add_fitted_draws", newdata = df_pred, n = 100, arg1)
exec("add_fitted_draws", newdata = df_pred, n = 100, arg1)
exec("add_fitted_draws", newdata = df_pred, n = 100, !!!arg1)
arg1
"<-", , fitted
"<-", , fitted
titted
fitted
arg1 <- rlang::parse_expr(paste0(Obj$fit_name, "[[1]]"))
arg1 <- rlang::parse_expr(paste0(sens))
arg1 <- rlang::parse_expr(paste0(sens$fit_name, "[[1]]"))
call2("add_fitted_draws", df_pred, arg1, 100)
rlang::call2("add_fitted_draws", df_pred, arg1, 100)
df_pred
eval(rlang::call2("add_fitted_draws", df_pred, arg1, 100)   )
sens
df_pred <- exec("expand.grid", age_group = 1:5, !!arg_name := arg_val)
arg_name <- sens$short_name
arg_val <- as.character(sebs$vals)
arg_name <- sens$short_name
arg_val <- as.character(sens$vals)
exec("expand.grid", age_group = 1:5, !!arg_name := arg_val)
df_pred <- exec("expand.grid", age_group = 1:5, !!arg_name := arg_val)
eval(rlang::call2("add_fitted_draws", df_pred, arg1, 100)   )
lol <- eval(rlang::call2("add_fitted_draws", df_pred, arg1, 100)   )
lol
lol <- eval(rlang::call2("add_fitted_draws", df_pred, arg1, 100)   )
arg1
,3_sens
,m3_sens
m3_sens
m3_sens[[1]]
devtools::load_all()
plot(sens)
df_pred
arg1
eval(arg1)
add_fitted_draws(df_pred, arg1, n = 100)
add_fitted_draws(df_pred, m3_sens, n = 100)
add_fitted_draws(df_pred, m3_sens[[1]], n = 100)
eval(rlang::call2("add_fitted_draws", df_pred, arg1, n = 100)   )
devtools::load_all()
plot(sens)
arg1 <- rlang::parse_expr(paste0(sens$fit_name, "[[1]]"))
arg2 <- rlang::parse_expr(paste0(sens$fit_name, "[[2]]"))
df_pred_both <- rbind(eval(rlang::call2("add_fitted_draws", df_pred, arg1, n = 100)) %>% mutate(protein = "S", measure = Obj$name),
eval(rlang::call2("add_fitted_draws", df_pred, arg2, n = 100)) %>% mutate(protein = "N", measure =  Obj$name))
df_pred_both$age_group <- factor(df_pred_both$age_group, levels = 1:5, labels = c("<30", "30-39", "40-49", "50-59", "60+"))
df_pred_both <- rbind(eval(rlang::call2("add_fitted_draws", df_pred, arg1, n = 100)) %>% mutate(protein = "S", measure = sens$name),
eval(rlang::call2("add_fitted_draws", df_pred, arg2, n = 100)) %>% mutate(protein = "N", measure =  sens$name))
df_pred_both$age_group <- factor(df_pred_both$age_group, levels = 1:5, labels = c("<30", "30-39", "40-49", "50-59", "60+"))
sens$name
df_pred_both <- rbind(eval(rlang::call2("add_fitted_draws", df_pred, arg1, n = 100)) %>% mutate(protein = "S", measure = sens$name),
eval(rlang::call2("add_fitted_draws", df_pred, arg2, n = 100)) %>% mutate(protein = "N", measure =  sens$name))
df_pred_both$age_group <- factor(df_pred_both$age_group, levels = 1:5, labels = c("<30", "30-39", "40-49", "50-59", "60+"))
eval(rlang::call2("add_fitted_draws", df_pred, arg1, n = 100)) %>% mutate(protein = "S", measure = sens$name)
eval(rlang::call2("add_fitted_draws", df_pred, arg1, n = 100))
eval(rlang::call2("add_fitted_draws", df_pred, arg1, n = 100)) %>% as.data.frame %>% mutate(protein = "S", measure = sens$name)
sens
eval(rlang::call2("add_fitted_draws", df_pred, arg1, n = 100)) %>% as.data.frame %>% mutate(protein = "S")
measure
eval(rlang::call2("add_fitted_draws", df_pred, arg1, n = 100)) %>% as.data.frame %>% mutate(protein = "S", measure = sens$name)
sens$name
eval(rlang::call2("add_fitted_draws", df_pred, arg1, n = 100)) %>% as.data.frame %>% mutate(protein = "S", measure = !!sens$name)
devtools::load_all()
plot(sens)
df_pred_both <- rbind(eval(rlang::call2("add_fitted_draws", df_pred, arg1, n = 100)) %>% mutate(protein = "S", measure = !!sens$name),
eval(rlang::call2("add_fitted_draws", df_pred, arg2, n = 100)) %>% mutate(protein = "N", measure = !!sens$name))
df_pred_both
df_pred_both$age_group <- factor(df_pred_both$age_group, levels = 1:5, labels = c("<30", "30-39", "40-49", "50-59", "60+"))
df_pred_both
df_pred_both %>%
ggplot(aes(x = as.numeric(!!sens$short_name) + 59))
df_pred_both %>%
ggplot(aes(x = as.numeric(!!sens$short_name) + 59)) +
geom_line(aes(y = .value*100, group = .draw), alpha = 0.05, color = "#08519C")
devtools::load_all()
devtools::load_all()
plot(sens)
spec <- test_metric("Specificity", 60:100, datafit_seroneg, `<`)
fit(spec)
plot(spec)
datafit_control
datafit_control%>% filter(protein == "S", Type == "Specificity")
datafit_control%>% filter(protein == "S", Type == "Specificity") %>% pull(OD)
datafit_control_pro <- datafit_control%>% filter(protein == "S", Type == "Specificity") %>% pull(OD)
datafit_control_pro <- datafit_control%>% filter(protein == "S", Type == "Specificity")
datafit_control_pro[which.min(abs(datafit_control_pro$Value - (i + 70))),]$OD
datafit_control_pro[which.min(abs(datafit_control_pro$Value - (11 + 59))),]$OD
datafit_control_pro[which.min(abs(datafit_control_pro$Value - (10 + 59))),]$OD
datafit_control_pro[which.min(abs(datafit_control_pro$Value - (9 + 59))),]$OD
datafit_control_pro[which.min(abs(datafit_control_pro$Value - (12) + 59))),]$OD
datafit_control_pro[which.min(abs(datafit_control_pro$Value - (12 + 59))),]$OD
datafit_control_pro[which.min(abs(datafit_control_pro$Value - (1 + 59))),]$OD
datafit_control_pro[which.min(abs(datafit_control_pro$Value - (10 + 59))),]$OD
datafit_control_pro[which.min(abs(datafit_control_pro$Value - (11 + 59))),]$OD
datafit_control_pro[which.min(abs(datafit_control_pro$Value - (12 + 59))),]$OD
datafit_control_pro[which.min(abs(datafit_control_pro$Value - (20 + 59))),]$OD
datafit_control_pro[which.min(abs(datafit_control_pro$Value - (21 + 59))),]$OD
datafit_control_pro[which.min(abs(datafit_control_pro$Value - (22 + 59))),]$OD
spec$dataraw
