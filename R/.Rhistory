weights = weight,
n_var = 2,
group = group)
m0 <- stan(model_code = stan_model_time, data = datalist, chains = 1)
m0
raw_data <- read.csv(system.file('extdata', 'pillar1_thushan.csv', package='serobayes'))
raw_data_comm <- read.csv(system.file('extdata', 'cases_tim.csv', package='serobayes'))
raw_data$Date <- yday(dmy(raw_data$Date))
raw_data <- raw_data %>% rename(time=Date, weight=Number.of.positive.samples, group=Type)
w1 <- filter(raw_data, group=="HCW")$weight/sum(filter(raw_data, group=="HCW")$weight)
w2 <- filter(raw_data, group=="Patient")$weight/sum(filter(raw_data, group=="Patient")$weight)
weight <- c(w1, w2)
group <- replace(raw_data$group, group=="HCW", 1)
group <- replace(raw_data$group, group=="Patient", 2)
group <- as.numeric(group)
datalist <- list(n = length(raw_data$time),
time = raw_data$time,
weights = weight,
n_var = 2,
group = group)
m0 <- stan(model_code = stan_model_time, data = datalist, chains = 1)
devtools::load_all()
# add some symptomatic data
require(reshape2)
require(purrr)
library(ggpubr)
library(rethinking)
require(purrr)
setwd("./documents/research/covid/hero/serobayes")
devtools::load_all()
devtools::load_all()
fit_dates_2()
devtools::load_all()
fit_dates_2()
raw_data <- read.csv(system.file('extdata', 'pillar1_thushan.csv', package='serobayes'))
raw_data_comm <- read.csv(system.file('extdata', 'cases_tim.csv', package='serobayes'))
raw_data$Date <- yday(dmy(raw_data$Date))
raw_data <- raw_data %>% rename(time=Date, weight=Number.of.positive.samples, group=Type)
w1 <- filter(raw_data, group=="HCW")$weight/sum(filter(raw_data, group=="HCW")$weight)
w2 <- filter(raw_data, group=="Patient")$weight/sum(filter(raw_data, group=="Patient")$weight)
weight <- c(w1, w2)
group <- replace(raw_data$group, raw_data$group=="HCW", 1)
group <- replace(raw_data$group, raw_data$group=="Patient", 2)
group <- as.numeric(group)
datalist <- list(n = length(raw_data$time),
time = raw_data$time,
weights = weight,
n_var = 2,
group = group)
raw_data
replace(raw_data$group, raw_data$group=="HCW", 1)
group1 <- replace(raw_data$group, raw_data$group=="HCW", 1)
group2 <- replace(raw_data$group, raw_data$group=="Patient", 2)
group <- as.numeric(c(group1, group2))
datalist <- list(n = length(raw_data$time),
time = raw_data$time,
weights = weight,
n_var = 2,
group = group)
group
group1 <- replace(raw_data$group, raw_data$group=="HCW", 1)
group2 <- replace(raw_data$group, raw_data$group=="Patient", 2)
group1
group1 <- replace(raw_data$group, raw_data$group=="HCW", 1)
group2 <- replace(group1, raw_data$group=="Patient", 2)
group <- as.numeric(c(group2))
group
group1 <- replace(raw_data$group, raw_data$group=="HCW", 1)
group2 <- replace(group1, raw_data$group=="Patient", 2)
group <- as.numeric(c(group2))
datalist <- list(n = length(raw_data$time),
time = raw_data$time,
weights = weight,
n_var = 2,
group = group)
m0 <- stan(model_code = stan_model_time, data = datalist, chains = 1)
require(lubridate)
stan_model_time <- "
data {
int n;
int n_var;
real time[n];
real weights[n];
int group[n];
}
transformed data{
real time_standard[n];
for (i in 1:n)
time_standard[i] = time[i]/100.0;
}
parameters {
real a_mu;
real a_sig;
real<lower = 0> sigma_sig;
real<lower = 0> sigma_mu;
vector[n_var] z_mu;
vector[n_var] z_sig;
}
transformed parameters {
vector[n] mu;
vector<lower= 0>[n] sigma;
mu = a_mu + z_mu[group]*sigma_mu;
sigma = a_sig + z_sig[group]*sigma_sig;
}
model {
// likelihood
for (i in 1:n){
target += weights[i]*normal_lpdf(time_standard[i] | mu[i], sigma);
}
// prior
a_mu ~ normal(1, 0.2);
a_sig ~ normal(0.4, 0.1);
z_mu[group] ~ normal(0, 1);
z_sig[group] ~ normal(0, 1);
sigma_mu ~ exponential(1);
sigma_sig ~ exponential(1);
}
generated quantities{
real sample[n_var];
vector[n_var] mu_temp;
vector<lower = 0>[n_var] sig_temp;
mu_temp = (a_mu + z_mu*sigma_mu)*100;
sig_temp = (a_sig + z_sig*sigma_sig)*100;
sample = normal_rng(mu_temp, sig_temp);
}
"
m0 <- stan(model_code = stan_model_time, data = datalist, chains = 1)
require(lubridate)
stan_model_time <- "
data {
int n;
int n_var;
real time[n];
real weights[n];
int group[n];
}
transformed data{
real time_standard[n];
for (i in 1:n)
time_standard[i] = time[i]/100.0;
}
parameters {
real a_mu;
real a_sig;
real<lower = 0> sigma_sig;
real<lower = 0> sigma_mu;
vector[n_var] z_mu;
vector[n_var] z_sig;
}
transformed parameters {
vector[n] mu;
vector<lower= 0>[n] sigma;
mu = a_mu + z_mu[group]*sigma_mu;
sigma = a_sig + z_sig[group]*sigma_sig;
}
model {
// likelihood
for (i in 1:n){
target += weights[i]*normal_lpdf(time_standard[i] | mu[i], sigma[i]);
}
// prior
a_mu ~ normal(1, 0.2);
a_sig ~ normal(0.4, 0.1);
z_mu[group] ~ normal(0, 1);
z_sig[group] ~ normal(0, 1);
sigma_mu ~ exponential(1);
sigma_sig ~ exponential(1);
}
generated quantities{
real sample[n_var];
vector[n_var] mu_temp;
vector<lower = 0>[n_var] sig_temp;
mu_temp = (a_mu + z_mu*sigma_mu)*100;
sig_temp = (a_sig + z_sig*sigma_sig)*100;
sample = normal_rng(mu_temp, sig_temp);
}
"
m0 <- stan(model_code = stan_model_time, data = datalist, chains = 1)
plt <- extract.samples(m0)
hehe <- plt$sample %>% apply(2, quantile, c(0.025, 0.5, 0.975)) %>% t %>% as.data.frame
hehe$cov <- c("HCW", "Hospitalised patient")
ggplot(data = hehe) +
geom_linerange(aes(xmin = as.Date(`2.5%`, origin = "2020-01-01"), xmax = as.Date(`97.5%`, origin = "2020-01-01"), y = cov), alpha= 0.6, size = 0.8, color = 'red') +
geom_point(aes(x = as.Date(`50%`, origin = "2020-01-01"), y = cov), shape = 21, fill = 'red', size = 3) + theme_bw() + labs(x = "Date in 2020")
raw_data_comm
plt$sample
plt$z_mu
plt$sigma_sig
plt$sigma_sigrequire(lubridate)
stan_model_time <- "
data {
int n;
int n_var;
real time[n];
real weights[n];
int group[n];
}
transformed data{
real time_standard[n];
for (i in 1:n)
time_standard[i] = time[i]/100.0;
}
parameters {
real a_mu;
real a_sig;
real<lower = 0> sigma_sig;
real<lower = 0> sigma_mu;
vector[n_var] z_mu;
vector[n_var] z_sig;
}
transformed parameters {
vector[n] mu;
vector<lower= 0>[n] sigma;
mu = a_mu + z_mu[group]*sigma_mu;
sigma = a_sig + z_sig[group]*sigma_sig;
}
model {
// likelihood
for (i in 1:n){
target += weights[i]*normal_lpdf(time_standard[i] | mu[i], sigma[i]);
}
// prior
a_mu ~ normal(1, 0.2);
a_sig ~ normal(0.4, 0.1);
z_mu[group] ~ normal(0, 1);
z_sig[group] ~ normal(0, 1);
sigma_mu ~ exponential(1);
sigma_sig ~ exponential(1);
}
generated quantities{
real sample[n_var];
vector[n_var] mu_temp;
vector<lower = 0>[n_var] sig_temp;
mu_temp = (a_mu + weights*z_mu*sigma_mu)*100;
sig_temp = (a_sig + weights*z_sig*sigma_sig)*100;
sample = normal_rng(mu_temp, sig_temp);
}
"
require(lubridate)
stan_model_time <- "
data {
int n;
int n_var;
real time[n];
real weights[n];
int group[n];
}
transformed data{
real time_standard[n];
for (i in 1:n)
time_standard[i] = time[i]/100.0;
}
parameters {
real a_mu;
real a_sig;
real<lower = 0> sigma_sig;
real<lower = 0> sigma_mu;
vector[n_var] z_mu;
vector[n_var] z_sig;
}
transformed parameters {
vector[n] mu;
vector<lower= 0>[n] sigma;
mu = a_mu + z_mu[group]*sigma_mu;
sigma = a_sig + z_sig[group]*sigma_sig;
}
model {
// likelihood
for (i in 1:n){
target += weights[i]*normal_lpdf(time_standard[i] | mu[i], sigma[i]);
}
// prior
a_mu ~ normal(1, 0.2);
a_sig ~ normal(0.4, 0.1);
z_mu[group] ~ normal(0, 1);
z_sig[group] ~ normal(0, 1);
sigma_mu ~ exponential(1);
sigma_sig ~ exponential(1);
}
generated quantities{
real sample[n_var];
vector[n_var] mu_temp;
vector<lower = 0>[n_var] sig_temp;
mu_temp = (a_mu + weights*z_mu*sigma_mu)*100;
sig_temp = (a_sig + weights*z_sig*sigma_sig)*100;
sample = normal_rng(mu_temp, sig_temp);
}
"
m0 <- stan(model_code = stan_model_time, data = datalist, chains = 1)
require(lubridate)
stan_model_time <- "
data {
int n;
int n_var;
real time[n];
vector[n] weights;
int group[n];
}
transformed data{
real time_standard[n];
for (i in 1:n)
time_standard[i] = time[i]/100.0;
}
parameters {
real a_mu;
real a_sig;
real<lower = 0> sigma_sig;
real<lower = 0> sigma_mu;
vector[n_var] z_mu;
vector[n_var] z_sig;
}
transformed parameters {
vector[n] mu;
vector<lower= 0>[n] sigma;
mu = a_mu + z_mu[group]*sigma_mu;
sigma = a_sig + z_sig[group]*sigma_sig;
}
model {
// likelihood
for (i in 1:n){
target += weights[i]*normal_lpdf(time_standard[i] | mu[i], sigma[i]);
}
// prior
a_mu ~ normal(1, 0.2);
a_sig ~ normal(0.4, 0.1);
z_mu[group] ~ normal(0, 1);
z_sig[group] ~ normal(0, 1);
sigma_mu ~ exponential(1);
sigma_sig ~ exponential(1);
}
generated quantities{
real sample[n_var];
vector[n_var] mu_temp;
vector<lower = 0>[n_var] sig_temp;
mu_temp = (a_mu + weights*z_mu*sigma_mu)*100;
sig_temp = (a_sig + weights*z_sig*sigma_sig)*100;
sample = normal_rng(mu_temp, sig_temp);
}
"
m0 <- stan(model_code = stan_model_time, data = datalist, chains = 1)
require(lubridate)
stan_model_time <- "
data {
int n;
int n_var;
real time[n];
vector[n] weights;
int group[n];
}
transformed data{
real time_standard[n];
for (i in 1:n)
time_standard[i] = time[i]/100.0;
}
parameters {
real a_mu;
real a_sig;
real<lower = 0> sigma_sig;
real<lower = 0> sigma_mu;
vector[n_var] z_mu;
vector[n_var] z_sig;
}
transformed parameters {
vector[n] mu;
vector<lower= 0>[n] sigma;
mu = a_mu + z_mu[group]*sigma_mu;
sigma = a_sig + z_sig[group]*sigma_sig;
}
model {
// likelihood
for (i in 1:n){
target += weights[i]*normal_lpdf(time_standard[i] | mu[i], sigma[i]);
}
// prior
a_mu ~ normal(1, 0.2);
a_sig ~ normal(0.4, 0.1);
z_mu[group] ~ normal(0, 1);
z_sig[group] ~ normal(0, 1);
sigma_mu ~ exponential(1);
sigma_sig ~ exponential(1);
}
generated quantities{
real sample[n_var];
vector[n_var] mu_temp;
vector<lower = 0>[n_var] sig_temp;
mu_temp = (a_mu + weights.*z_mu*sigma_mu)*100;
sig_temp = (a_sig + weights.*z_sig*sigma_sig)*100;
sample = normal_rng(mu_temp, sig_temp);
}
"
m0 <- stan(model_code = stan_model_time, data = datalist, chains = 1)
hehe$sample
plt$sample
raw_data
raw_data <- read.csv(system.file('extdata', 'pillar1_thushan.csv', package='serobayes'))
raw_data_comm <- read.csv(system.file('extdata', 'cases_tim.csv', package='serobayes'))
raw_data_comm
raw_data$Date <- yday(dmy(raw_data$Date))
raw_data <- raw_data %>% rename(time=Date, weight=Number.of.positive.samples, group=Type)
w1 <- filter(raw_data, group=="HCW")$weight/sum(filter(raw_data, group=="HCW")$weight)
w2 <- filter(raw_data, group=="Patient")$weight/sum(filter(raw_data, group=="Patient")$weight)
weight <- c(w1, w2)
group1 <- replace(raw_data$group, raw_data$group=="HCW", 1)
group2 <- replace(group1, raw_data$group=="Patient", 2)
group <- as.numeric(c(group2))
datalist <- list(n = length(raw_data$time),
time = raw_data$time,
weights = raw_data$weight,
n_var = 2,
group = group)
m0 <- stan(model_code = stan_model_time, data = datalist, chains = 1)
require(lubridate)
stan_model_time <- "
data {
int n;
int n_var;
real time[n];
vector[n] weights;
int group[n];
}
transformed data{
real time_standard[n];
for (i in 1:n)
time_standard[i] = time[i]/100.0;
}
parameters {
real a_mu;
real a_sig;
real<lower = 0> sigma_sig;
real<lower = 0> sigma_mu;
vector[n_var] z_mu;
vector[n_var] z_sig;
}
transformed parameters {
vector[n] mu;
vector<lower= 0>[n] sigma;
mu = a_mu + z_mu[group]*sigma_mu;
sigma = a_sig + z_sig[group]*sigma_sig;
}
model {
// likelihood
for (i in 1:n){
target += weights[i]*normal_lpdf(time_standard[i] | mu[i], sigma[i]);
}
// prior
a_mu ~ normal(1, 0.2);
a_sig ~ normal(0.4, 0.1);
z_mu[group] ~ normal(0, 1);
z_sig[group] ~ normal(0, 1);
sigma_mu ~ exponential(1);
sigma_sig ~ exponential(1);
}
generated quantities{
real sample[n_var];
vector[n_var] mu_temp;
vector<lower = 0>[n_var] sig_temp;
mu_temp = (a_mu + z_mu*sigma_mu)*100;
sig_temp = (a_sig + z_sig*sigma_sig)*100;
sample = normal_rng(mu_temp, sig_temp);
}
"
raw_data <- read.csv(system.file('extdata', 'pillar1_thushan.csv', package='serobayes'))
raw_data_comm <- read.csv(system.file('extdata', 'cases_tim.csv', package='serobayes'))
raw_data_comm
raw_data$Date <- yday(dmy(raw_data$Date))
raw_data <- raw_data %>% rename(time=Date, weight=Number.of.positive.samples, group=Type)
w1 <- filter(raw_data, group=="HCW")$weight/sum(filter(raw_data, group=="HCW")$weight)
w2 <- filter(raw_data, group=="Patient")$weight/sum(filter(raw_data, group=="Patient")$weight)
weight <- c(w1, w2)
group1 <- replace(raw_data$group, raw_data$group=="HCW", 1)
group2 <- replace(group1, raw_data$group=="Patient", 2)
group <- as.numeric(c(group2))
datalist <- list(n = length(raw_data$time),
time = raw_data$time,
weights = raw_data$weight,
n_var = 2,
group = group)
m0 <- stan(model_code = stan_model_time, data = datalist, chains = 1)
plt <- extract.samples(m0)
hehe <- plt$sample %>% apply(2, quantile, c(0.025, 0.5, 0.975)) %>% t %>% as.data.frame
hehe$cov <- c("HCW", "Hospitalised patient")
ggplot(data = hehe) +
geom_linerange(aes(xmin = as.Date(`2.5%`, origin = "2020-01-01"), xmax = as.Date(`97.5%`, origin = "2020-01-01"), y = cov), alpha= 0.6, size = 0.8, color = 'red') +
geom_point(aes(x = as.Date(`50%`, origin = "2020-01-01"), y = cov), shape = 21, fill = 'red', size = 3) + theme_bw() + labs(x = "Date in 2020")
raw_data_comm
raw_data_comm <- raw_data_comm %>% select(date, new_cases_adjusted_mid)
raw_data_comm
raw_data_comm$date
str(raw_data_comm$date)
as.Date(raw_data_comm$date)
str(as.Date(raw_data_comm$date))
str(  raw_data_comm <- read.csv(system.file('extdata', 'cases_tim.csv', package='serobayes'))
raw_data_comm <- raw_data_comm %>% select(date, new_cases_adjusted_mid)
raw_data_comm$date <- as.Date(raw_data_comm$date)
raw_data_comm$weight <- raw_data_comm$new_cases_adjusted_mid)
raw_data_comm <- read.csv(system.file('extdata', 'cases_tim.csv', package='serobayes'))
raw_data_comm <- raw_data_comm %>% select(date, new_cases_adjusted_mid)
raw_data_comm$date <- as.Date(raw_data_comm$date)
raw_data_comm$weight <- raw_data_comm$new_cases_adjusted_mid
raw_data_comm
raw_data_comm <- raw_data_comm %>% select(date, weight=new_cases_adjusted_mid)
raw_data_comm$date <- as.Date(raw_data_comm$date)
raw_data_comm
inv_logit(5)
devtools::load_all()
devtools::load_all()
save_all_datafit()
require(tidyverse)
save_all_datafit()
data(datafit) # loads all data-sets for fitting into environment
datafit
datafit_hero
